version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    steps: 
      - checkout 
      # 依存関係をダウンロードしてキャシュする
      - restore_cache:
          keys:
          - v1-dependencies-{{ .Branch }}-{{ checksum "build.gradle" }}
          - v1-dependencies-{{ .Branch }}-
          - v1-dependencies-
      - run: gradle dependencies
      - run: gradle build -x test
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ .Branch }}-{{ checksum "build.gradle" }}
      # 他のjobでも共有する
      - persist_to_workspace: 
          root: ~/repo
          paths: 
            - .
  test:
    docker:
      - image: circleci/openjdk:11-jdk
      - image: circleci/postgres:9.6
        environment: 
          POSTGRES_USER: ${TODO_APP_USER}
          POSTGRES_PASSWORD: ${TODO_APP_PASS}
          POSTGRES_DB: ${TODO_APP_DB}
    working_directory: ~/repo
    steps:
      # 共有したworkspaceをアタッチする
      - attach_workspace:
          at: ~/repo
      - run: 
          name: DBの起動を待つ
          command: dockerize -wait tcp://127.0.0.1:5432 -timeout 120s
      - run: 
          name: テストの実施
          command: gradle test
  deploy:
    machine:
      image: circleci/classic:edge
    working_directory: ~/repo
    steps:
      # 共有したworkspaceをアタッチする
      - attach_workspace:
          at: ~/repo
      - run: 
          name: Herokuメンテナンスモードオン
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: Herokuへデプロイ
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run: 
          name: Herokuメンテナンスモードオフ
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test: 
          requires:
            - build
      - deploy: 
          requires:
            - build
            - test
          filters: 
            branches:
              only: 
                - master